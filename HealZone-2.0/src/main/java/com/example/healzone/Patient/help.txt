@FXML
    private void onHistoryButtonClicked() {
        if (showingAppointments) return;

        System.out.println("Switching to appointment history");
        showingAppointments = true;
        filterButton.setVisible(false);
        sortButton.setVisible(false);
        sectionTitle.setText("Appointment History");
        searchBar.setVisible(false);

        doctorCardsContainer.getChildren().clear();
        noResultsMessage.setVisible(false);
        loadingIndicator.setVisible(true);

        Task<Parent> loadTask = new Task<>() {
            @Override
            protected Parent call() throws Exception {
                try {
                    // Load the PatientAppointmentHistory.fxml (you'll need to create this FXML file)
                    System.out.println("Attempting to load FXML: /com/example/healzone/Patient/PatientAppointmentHistory.fxml");
                    FXMLLoader loader = new FXMLLoader(getClass().getResource("/com/example/healzone/Patient/PatientAppointmentHistory.fxml"));

                    if (loader.getLocation() == null) {
                        throw new IOException("FXML file not found: /com/example/healzone/Patient/PatientAppointmentHistory.fxml");
                    }

                    Parent historyPage = loader.load();
                    PatientAppointmentHistoryController controller = loader.getController();

                    if (controller == null) {
                        throw new IOException("Failed to get PatientAppointmentHistoryController from FXML");
                    }

                    // Get the patient's phone number for fetching history
                    String patientPhone = Patient.getPhone();
                    if (patientPhone == null) {
                        throw new Exception("Patient phone number not found");
                    }

                    // Pass the appointment history data to the controller
                    // You'll need to create this method in your Appointments class
                    List<Map<String, Object>> history = Appointments.getAppointmentHistoryForPatient(patientPhone);
                    controller.setHistoryData(history);

                    // Store controller for potential future access
                    historyPage.getProperties().put("controller", controller);
                    System.out.println("Patient history page loaded successfully");
                    return historyPage;
                } catch (Exception e) {
                    System.err.println("Error loading patient history page: " + e.getMessage());
                    e.printStackTrace();
                    throw e;
                }
            }
        };

        loadTask.setOnSucceeded(event -> {
            Platform.runLater(() -> {
                try {
                    Parent historyPage = loadTask.getValue();
                    if (rootPane != null && historyPage != null) {
                        rootPane.getChildren().setAll(historyPage);
                        animateContent();
                        loadingIndicator.setVisible(false);
                    } else {
                        showErrorAlert("Load Error", "History page or container is null");
                        loadingIndicator.setVisible(false);
                    }
                } catch (Exception e) {
                    System.err.println("Error setting history content: " + e.getMessage());
                    showErrorAlert("Load Error", "Failed to set history content: " + e.getMessage());
                    loadingIndicator.setVisible(false);
                }
            });
        });

        loadTask.setOnFailed(event -> {
            Platform.runLater(() -> {
                Throwable exception = loadTask.getException();
                String errorMessage = exception != null ? exception.getMessage() : "Unknown error";
                System.err.println("Patient history load failed: " + errorMessage);
                showErrorAlert("Load Error", "Failed to load history: " + errorMessage);
                loadingIndicator.setVisible(false);

                // Reset the UI state on failure
                showingAppointments = false;
                filterButton.setVisible(true);
                sortButton.setVisible(true);
                sectionTitle.setText("Available Doctors");
                searchBar.setVisible(true);
            });
        });

        new Thread(loadTask).start();
    }

// You'll also need to add this method to your Appointments class
// Add this to your Appointments.java file in the DatabaseConnection package:

    public static List<Map<String, Object>> getAppointmentHistoryForPatient(String patientPhone) {
        List<Map<String, Object>> history = new ArrayList<>();
        String query = """
        SELECT a.id, a.appointment_date, a.appointment_time, a.status, a.notes,
               d.first_name as doctor_first_name, d.last_name as doctor_last_name,
               d.specialization, d.hospital_name
        FROM appointments a
        JOIN doctors d ON a.doctor_id = d.govt_id
        WHERE a.patient_phone = ?
        AND a.status IN ('completed', 'cancelled', 'no_show')
        ORDER BY a.appointment_date DESC, a.appointment_time DESC
    """;

        try (PreparedStatement pstmt = connection.prepareStatement(query)) {

            pstmt.setString(1, patientPhone);
            try (ResultSet rs = pstmt.executeQuery()) {
                while (rs.next()) {
                    Map<String, Object> appointment = new HashMap<>();
                    appointment.put("id", rs.getInt("id"));
                    appointment.put("appointmentDate", rs.getDate("appointment_date"));
                    appointment.put("appointmentTime", rs.getTime("appointment_time"));
                    appointment.put("status", rs.getString("status"));
                    appointment.put("notes", rs.getString("notes"));
                    appointment.put("doctorFirstName", rs.getString("doctor_first_name"));
                    appointment.put("doctorLastName", rs.getString("doctor_last_name"));
                    appointment.put("specialization", rs.getString("specialization"));
                    appointment.put("hospitalName", rs.getString("hospital_name"));
                    history.add(appointment);
                }
            }
        } catch (SQLException e) {
            System.err.println("Error fetching patient appointment history: " + e.getMessage());
            e.printStackTrace();
        }

        return history;
    }